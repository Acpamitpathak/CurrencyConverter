import json
import os
from datetime import datetime

class MarkdownReportGenerator:
    def __init__(self, output_dir="output"):
        self.output_dir = output_dir
        os.makedirs(self.output_dir, exist_ok=True)

    def generate_markdown_report(self, response_data):
        # Handle string input (assume JSON string)
        if isinstance(response_data, str):
            try:
                response_data = json.loads(response_data)
            except json.JSONDecodeError:
                raise ValueError("Provided response_data string is not valid JSON.")

        # Ensure it's a dictionary after parsing
        if not isinstance(response_data, dict):
            raise TypeError("Expected dict or JSON string, but got something else.")

        filename = f"llm_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        filepath = os.path.join(self.output_dir, filename)

        with open(filepath, "w", encoding="utf-8") as f:
            f.write(f"# üìù LLM Evaluation Report\n\n")

            # Evaluation Summary
            summary = response_data.get("evaluation_summary", {})
            if summary:
                f.write(f"## üìå Evaluation Summary\n\n")
                for key, value in summary.items():
                    f.write(f"- **{self._prettify(key)}:** {value}\n")
                f.write("\n")

            # Section Analysis
            section_analysis = response_data.get("section_analysis", {})
            if section_analysis:
                f.write("## üìÇ Section Analysis\n\n")
                for section, content in section_analysis.items():
                    f.write(f"### üîπ {self._prettify(section)}\n")
                    if isinstance(content, dict):
                        for subkey, subvalue in content.items():
                            f.write(f"- **{self._prettify(subkey)}:** {subvalue}\n")
                    else:
                        f.write(f"- {content}\n")
                    f.write("\n")

            # Remaining top-level keys
            for key, value in response_data.items():
                if key in ["evaluation_summary", "section_analysis"]:
                    continue
                f.write(f"## üì¶ {self._prettify(key)}\n\n")
                self._write_value(f, value)
                f.write("\n")

        return filepath

    def _write_value(self, f, value, indent=0):
        prefix = "  " * indent
        if isinstance(value, dict):
            for key, val in value.items():
                f.write(f"{prefix}- **{self._prettify(key)}:**\n")
                self._write_value(f, val, indent + 1)
        elif isinstance(value, list):
            for item in value:
                f.write(f"{prefix}- ")
                self._write_value(f, item, indent + 1)
        else:
            f.write(f"{prefix}- {value}\n")

    def _prettify(self, text):
        return text.replace("_", " ").capitalize()