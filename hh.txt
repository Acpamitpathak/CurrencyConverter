import os
import json
from datetime import datetime

class MarkdownReportGenerator:
    def generate_markdown_report(self, response_data: dict) -> str:
        base_dir = os.path.dirname(os.path.abspath(__file__))
        output_dir = os.path.join(base_dir, "output")
        os.makedirs(output_dir, exist_ok=True)

        filename = f"evaluation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        filepath = os.path.join(output_dir, filename)

        def write_dict(f, data, level=2):
            """ Recursively write dict as structured markdown """
            for key, value in data.items():
                title = f"{'#' * level} {key.replace('_', ' ').title()}"
                f.write(f"\n{title}\n")
                if isinstance(value, dict):
                    write_dict(f, value, level + 1)
                elif isinstance(value, list):
                    for item in value:
                        if isinstance(item, dict):
                            f.write(f"\n{'-' * 10}\n")
                            write_dict(f, item, level + 1)
                        else:
                            f.write(f"- {item}\n")
                else:
                    f.write(f"- **{key.replace('_', ' ').title()}**: {value}\n")

        with open(filepath, "w", encoding="utf-8") as f:
            f.write("# üìù LLM Evaluation Report\n")

            for section, content in response_data.items():
                section_title = f"\n## üìÇ {section.replace('_', ' ').title()}\n"
                f.write(section_title)

                if isinstance(content, dict):
                    write_dict(f, content, level=3)
                elif isinstance(content, list):
                    for item in content:
                        if isinstance(item, dict):
                            write_dict(f, item, level=3)
                        else:
                            f.write(f"- {item}\n")
                else:
                    f.write(f"- {content}\n")

        return filepath