import os
import json
import tempfile
from fastapi import FastAPI, UploadFile, File
from PyPDF2 import PdfReader
from docx import Document
from pdf2image import convert_from_path
from PIL import Image
import zipfile

app = FastAPI()


class AdvancedFileContentExtractor:
    async def extract_text_from_uploadfile(self, upload_file: UploadFile) -> str:
        # Create a temp file from UploadFile
        suffix = os.path.splitext(upload_file.filename)[1]
        with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as tmp:
            tmp.write(await upload_file.read())
            tmp_path = tmp.name

        return self.extract_text_from_file(tmp_path)

    def extract_text_from_file(self, file_path: str) -> str:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"File not found: {file_path}")

        ext = os.path.splitext(file_path)[1].lower()

        if ext == ".txt":
            return self._read_text(file_path)
        elif ext == ".json":
            return self._read_json(file_path)
        elif ext == ".pdf":
            return self._read_pdf(file_path)
        elif ext == ".docx":
            return self._read_docx(file_path)
        else:
            return "Unsupported file type."

    def _read_text(self, path: str) -> str:
        with open(path, "r", encoding="utf-8") as f:
            return f.read()

    def _read_json(self, path: str) -> str:
        with open(path, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
                return json.dumps(data, indent=2)
            except json.JSONDecodeError as e:
                return f"Invalid JSON: {str(e)}"

    def _read_pdf(self, path: str) -> str:
        reader = PdfReader(path)
        text = ""
        for page in reader.pages:
            text += page.extract_text() or ""

        # Optional: extract images
        images_info = self._extract_images_from_pdf(path)
        return text.strip() + "\n\n" + images_info

    def _extract_images_from_pdf(self, path: str) -> str:
        image_dir = os.path.join(os.path.dirname(path), "extracted_images")
        os.makedirs(image_dir, exist_ok=True)
        images = convert_from_path(path)
        filenames = []
        for i, img in enumerate(images):
            filename = os.path.join(image_dir, f"pdf_image_{i+1}.png")
            img.save(filename, "PNG")
            filenames.append(filename)
        return f"Extracted {len(filenames)} images from PDF:\n" + "\n".join(filenames)

    def _read_docx(self, path: str) -> str:
        doc = Document(path)
        text = []

        # Paragraphs
        for para in doc.paragraphs:
            if para.text.strip():
                text.append(para.text.strip())

        # Tables
        for table in doc.tables:
            for row in table.rows:
                row_text = [cell.text.strip() for cell in row.cells]
                text.append(" | ".join(row_text))

        image_info = self._extract_images_from_docx(path)
        return "\n".join(text) + "\n\n" + image_info

    def _extract_images_from_docx(self, path: str) -> str:
        docx_dir = os.path.splitext(path)[0] + "_media"
        os.makedirs(docx_dir, exist_ok=True)

        with zipfile.ZipFile(path, "r") as zip_ref:
            zip_ref.extractall(docx_dir)

        media_path = os.path.join(docx_dir, "word", "media")
        if not os.path.exists(media_path):
            return "No images found in Word document."

        image_files = [os.path.join(media_path, f) for f in os.listdir(media_path)]
        return f"Extracted {len(image_files)} images from Word:\n" + "\n".join(image_files)


@app.post("/upload")
async def upload_file(input_file: UploadFile = File(...)):
    extractor = AdvancedFileContentExtractor()
    content = await extractor.extract_text_from_uploadfile(input_file)
    return {"filename": input_file.filename, "content": content}
